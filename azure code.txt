trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'windows-latest'

variables:
  group: powerbi  # Ensure this variable group contains clientid, clientsecret, and tenantid
  MODULE_LIST:
    - MicrosoftPowerBIMgmt
    - Invoke-DQVTesting
    - Invoke-SemanticModelRefresh

steps:

# Step 1: Checkout Repository
- checkout: self
  displayName: 'Checkout Repository'

# Step 2: Install Dependencies Dynamically
- task: PowerShell@2
  displayName: 'Install Required Modules'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Installing dependencies dynamically..."
      foreach ($module in ${{ variables.MODULE_LIST }}) {
          Write-Host "Checking for module: $module"
          if (-not (Get-Module -ListAvailable -Name $module)) {
              Write-Host "Installing module: $module"
              Install-Module -Name $module -Scope CurrentUser -Force
          } else {
              Write-Host "$module is already installed."
          }
      }

# Step 3: Authenticate Power BI Service
- task: PowerShell@2
  displayName: 'Authenticate Power BI Service'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Authenticating with Power BI Service..."
      $secureSecret = $env:Clientsecret | ConvertTo-SecureString -AsPlainText -Force
      $credential = [System.Management.Automation.PSCredential]::new($env:Clientid, $secureSecret)
      Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId $env:Tenantid

# Step 4: Detect Changes in Commit
- task: PowerShell@2
  displayName: 'Detect Changes in Commit'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Detecting changes in the current commit..."
      git diff --name-only HEAD^ HEAD > changed_files.txt
      $changedFiles = Get-Content changed_files.txt
      if (!$changedFiles) {
          Write-Host "No changes detected in the current commit."
          exit 0
      } else {
          Write-Host "Changed files: $changedFiles"
      }

# Step 5: Validate Semantic Models and Reports
- task: PowerShell@2
  displayName: 'Validate Semantic Models and Reports'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Validating Semantic Models and Reports..."
      foreach ($file in $changedFiles) {
          if ($file -match "semanticmodel") {
              Write-Host "Validating semantic model: $file"
              # Add validation logic here for semantic models
          }
          if ($file -match "report") {
              Write-Host "Validating report: $file"
              # Add validation logic here for reports
          }
      }

# Step 6: Promote Files to UAT
- task: PowerShell@2
  displayName: 'Promote Files to UAT'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Promoting files to UAT..."
      foreach ($file in $changedFiles) {
          Write-Host "Promoting $file to UAT..."
          # Add logic here to promote files to the UAT workspace
      }

# Step 7: Log Results
- task: PowerShell@2
  displayName: 'Log Results'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Logging results of pipeline execution..."
      # Optionally save logs to an Azure artifact or external storage for review
