trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'windows-latest'

variables:
  SOURCE_WORKSPACE_ID: '<Replace_with_Dev_Workspace_ID>'
  TARGET_WORKSPACE_ID: '<Replace_with_UAT_Workspace_ID>'
  CLIENT_ID: '<Replace_with_Client_ID>'
  CLIENT_SECRET: '<Replace_with_Client_Secret>'
  TENANT_ID: '<Replace_with_Tenant_ID>'
  DEPENDENCIES:
    - MicrosoftPowerBIMgmt
    - Invoke-DQVTesting
    - Invoke-SemanticModelRefresh

steps:
# Step 1: Checkout Repository
- checkout: self
  displayName: 'Checkout Repository'

# Step 2: Install Dependencies Dynamically
- task: PowerShell@2
  displayName: Install Required Modules
  inputs:
    pwsh: true
    targetType: inline
    script: |
      $dependencies = @("MicrosoftPowerBIMgmt", "Invoke-DQVTesting", "Invoke-SemanticModelRefresh")
      foreach ($module in $dependencies) {
          if (!(Get-Module -ListAvailable -Name $module)) {
              Write-Host "Installing module: $($module)"
              Install-Module -Name $module -Scope CurrentUser -Force
          } else {
              Write-Host "Module $($module) is already installed."
          }
      }

# Step 3: Authenticate with Power BI Service
- task: PowerShell@2
  displayName: Authenticate Power BI
  inputs:
    pwsh: true
    targetType: inline
    script: |
      $secret = (${env:CLIENT_SECRET} | ConvertTo-SecureString -AsPlainText -Force)
      $credential = [System.Management.Automation.PSCredential]::new(${env:CLIENT_ID}, $secret)
      Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId "${env:TENANT_ID}"
      Write-Host "Authentication successful for Power BI."

# Step 4: Detect Changes in Latest Commit
- task: PowerShell@2
  displayName: Detect Changed Files
  inputs:
    pwsh: true
    targetType: inline
    script: |
      # Detect file changes
      $ChangedSemanticModels = @(git diff --name-only --relative --diff-filter=d HEAD~1..HEAD '*.Dataset/**/*.SemanticModel/**')
      $ChangedReports = @(git diff --name-only --relative --diff-filter=d HEAD~1..HEAD '*.Report/**')

      if ($ChangedSemanticModels.Count -eq 0 -and $ChangedReports.Count -eq 0) {
          Write-Host "No changes detected. Exiting pipeline."
          exit 0
      }

      Write-Output "##vso[task.setvariable variable=ChangedSemanticModels]$ChangedSemanticModels"
      Write-Output "##vso[task.setvariable variable=ChangedReports]$ChangedReports"
      Write-Host "Detected Semantic Models: $ChangedSemanticModels"
      Write-Host "Detected Reports: $ChangedReports"

# Step 5: Validate Semantic Models and Reports
- task: PowerShell@2
  displayName: Validate Semantic Models and Reports
  inputs:
    pwsh: true
    targetType: inline
    script: |
      $ChangedSemanticModels = "$(ChangedSemanticModels)"
      $ChangedReports = "$(ChangedReports)"
      foreach ($change in $ChangedSemanticModels) {
          Write-Host "Validating Semantic Model: $change"
          if (-not (Test-Path $change)) {
              Write-Host "##[error] Semantic Model $change not found. Skipping."
              continue
          }
      }
      foreach ($change in $ChangedReports) {
          Write-Host "Validating Report: $change"
          if (-not (Test-Path $change)) {
              Write-Host "##[error] Report $change not found. Skipping."
              continue
          }
      }
      Write-Host "Validation completed successfully."

# Step 6: Promote Files to UAT
- task: PowerShell@2
  displayName: Promote Files to UAT
  inputs:
    pwsh: true
    targetType: inline
    script: |
      $sourceWorkspaceId = "$(SOURCE_WORKSPACE_ID)"
      $targetWorkspaceId = "$(TARGET_WORKSPACE_ID)"
      $ChangedSemanticModels = "$(ChangedSemanticModels)"
      $ChangedReports = "$(ChangedReports)"

      foreach ($change in $ChangedSemanticModels) {
          Write-Host "Promoting Semantic Model: $change"
          Copy-PowerBIDataset -DatasetId $change -SourceWorkspaceId $sourceWorkspaceId -TargetWorkspaceId $targetWorkspaceId
      }
      foreach ($change in $ChangedReports) {
          Write-Host "Promoting Report: $change"
          Copy-PowerBIReport -ReportId $change -SourceWorkspaceId $sourceWorkspaceId -TargetWorkspaceId $targetWorkspaceId
      }
      Write-Host "Promotion completed successfully."

# Step 7: Log Results
- task: PublishBuildArtifacts@1
  displayName: Publish Logs
  inputs:
    pathToPublish: $(Pipeline.Workspace)/logs
    artifactName: PromotionLogs
