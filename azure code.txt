trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'windows-latest'

variables:
  group: powerbi
  DEPENDENCIES:
    - MicrosoftPowerBIMgmt
    - Invoke-DQVTesting
    - Invoke-SemanticModelRefresh

steps:
# Step 1: Checkout Repository
- checkout: self
  displayName: 'Checkout Repository'

# Step 2: Install Dependencies Dynamically
- task: PowerShell@2
  displayName: 'Install Required Modules'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Installing dependencies dynamically..."
      foreach ($module in ${{ variables.DEPENDENCIES }}) {
        if (!(Get-Module -ListAvailable -Name $module)) {
          Install-Module -Name $module -Scope CurrentUser -Force
        }
      }

# Step 3: Authenticate with Power BI Service
- task: PowerShell@2
  displayName: 'Authenticate with Power BI Service'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Authenticating with Power BI Service..."
      $secret = "${{ variables.CLIENTSECRET }}" | ConvertTo-SecureString -AsPlainText -Force
      $credential = [System.Management.Automation.PSCredential]::new("${{ variables.CLIENTID }}", $secret)
      Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId "${{ variables.TENANTID }}"

# Step 4: Detect Changes in Commit
- task: PowerShell@2
  displayName: 'Detect Changes in Commit'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Detecting changes in commit..."
      $pbipDSChanges = git diff --name-only --relative --diff-filter=d HEAD~1..HEAD '*.Dataset/**/*.SemanticModel/**'
      $pbipRPTChanges = git diff --name-only --relative --diff-filter=d HEAD~1..HEAD '*.Report/**'
      $pbipDSChanges = $pbipDSChanges | Sort-Object -Unique
      $pbipRPTChanges = $pbipRPTChanges | Sort-Object -Unique

      if ($pbipDSChanges -eq $null -and $pbipRPTChanges -eq $null) {
        Write-Host "No changes detected. Exiting..."
        exit 0
      }

# Step 5: Validate Semantic Models and Reports
- task: PowerShell@2
  displayName: 'Validate Semantic Models and Reports'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Validating semantic models and reports..."
      # Add validation logic as needed

# Step 6: Promote Files to UAT
- task: PowerShell@2
  displayName: 'Promote Files to UAT'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Promoting files to UAT..."
      $sourceWorkspaceId = "c017440f-4a5b-46bd-a2c0-93ee3f04ab4d" # Replace with actual source workspace ID
      $targetWorkspaceId = "a4628c7b-adda-4285-8c1f-758b19162d0b" # Replace with actual target workspace ID

      $reports = Get-PowerBIReport -WorkspaceId $sourceWorkspaceId
      $datasets = Get-PowerBIDataset -WorkspaceId $sourceWorkspaceId

      foreach ($report in $reports) {
        Write-Host "Moving report: $($report.Name) from Dev to UAT"
        Copy-PowerBIReport -ReportId $report.Id -SourceWorkspaceId $sourceWorkspaceId -TargetWorkspaceId $targetWorkspaceId
      }

      foreach ($dataset in $datasets) {
        Write-Host "Moving dataset: $($dataset.Name) from Dev to UAT"
        Copy-PowerBIDataset -DatasetId $dataset.Id -SourceWorkspaceId $sourceWorkspaceId -TargetWorkspaceId $targetWorkspaceId
      }

# Step 7: Log Results
- task: PowerShell@2
  displayName: 'Log Results'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Logging results..."
      # Add logging logic as needed
