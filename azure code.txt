trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'windows-latest'

variables:
  group: powerbi # Ensure this variable group contains clientid, clientsecret, and tenantid
  SOURCE_WORKSPACE_ID: "c017440f-4a5b-46bd-a2c0-93ee3f04ab4d"
  TARGET_WORKSPACE_ID: "a4628c7b-adda-4285-8c1f-758b19162d0b"
  MODULE_LIST: |
    MicrosoftPowerBIMgmt
    Invoke-DQVTesting
    Invoke-SemanticModelRefresh

steps:
# Step 1: Checkout Repository
- checkout: self
  displayName: 'Checkout Repository'

# Step 2: Install Dependencies Dynamically
- task: PowerShell@2
  displayName: 'Install Required Modules'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Installing dependencies dynamically..."

      # Include Az.Accounts module in the list
      $modules = @(
        "Az.Accounts"
        "MicrosoftPowerBIMgmt"
        "Invoke-DQVTesting"
        "Invoke-SemanticModelRefresh"
      )
      
      # Loop through the modules and install if missing
      foreach ($module in $modules) {
        Write-Host "Checking module: $module"
        if (-not (Get-Module -ListAvailable -Name $module)) {
          Write-Host "Installing module: $module"
          Install-Module -Name $module -Scope CurrentUser -Force -ErrorAction Stop
        } else {
          Write-Host "Module $module is already installed."
        }
      }
# Step 3: Authenticate with Azure and Power BI Service
- task: PowerShell@2
  displayName: 'Authenticate with Azure and Power BI Service'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Authenticating with Azure and Power BI Service..."

      # Setup variables for credentials
      $clientSecret = "${{ variables.Clientsecret }}"
      $clientId = "${{ variables.clinetid }}"
      $tenantId = "${{ variables.tenantid }}"

      # Directly login to Azure
      Write-Host "Logging in to Azure using Service Principal..."
      Connect-AzAccount -ServicePrincipal -TenantId $tenantId -ApplicationId $clientId -CertificateThumbprint $clientSecret -ErrorAction Stop

      Write-Host "Azure authentication successful."

      # Optionally set Fabric Auth Token if required
      Write-Host "Setting Fabric authentication token..."
      Set-FabricAuthToken -servicePrincipalId $clientId `
                          -servicePrincipalSecret $clientSecret `
                          -tenantId $tenantId -reset

      Write-Host "Authentication with Azure and Power BI Service completed successfully!"










# Step 4: Detect Changes in Commit
- task: PowerShell@2
  displayName: 'Detect Changes in Commit'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Detecting changes in the latest commit..."
      $changedFiles = git diff --name-only HEAD~1 HEAD
      Write-Host "Changed files detected:"
      Write-Host $changedFiles

# Step 5: Validate Semantic Models and Reports
- task: PowerShell@2
  displayName: 'Validate Semantic Models and Reports'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Validating Semantic Models and Reports..."
      foreach ($file in $changedFiles) {
        if ($file -match "semanticmodel") {
          Write-Host "Running Semantic Model Validation for: $file"
          Invoke-SemanticModelRefresh -ModelPath $file -WorkspaceId ${{ variables.SOURCE_WORKSPACE_ID }}
        }
        if ($file -match "report") {
          Write-Host "Running Data Quality Validation for: $file"
          Invoke-DQVTesting -ReportPath $file -WorkspaceId ${{ variables.SOURCE_WORKSPACE_ID }}
        }
      }

# Step 6: Promote Files to UAT
- task: PowerShell@2
  displayName: 'Promote Files to UAT'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Promoting files to UAT..."
      foreach ($file in $changedFiles) {
        if ($file -match "semanticmodel" -or $file -match "report") {
          Write-Host "Promoting $file to UAT Workspace..."
          Publish-PowerBIFile -Path $file -SourceWorkspaceId ${{ variables.SOURCE_WORKSPACE_ID }} -TargetWorkspaceId ${{ variables.TARGET_WORKSPACE_ID }}
        }
      }

# Step 7: Log Results
- task: PowerShell@2
  displayName: 'Log Results'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Write-Host "Logging results..."
      # Log timestamp
      Get-Date | Out-File -FilePath $(Pipeline.Workspace)/log.txt -Append
      # Log changes and promotions
      foreach ($file in $changedFiles) {
        $logEntry = "Promoted file: $file"
        $logEntry | Out-File -FilePath $(Pipeline.Workspace)/log.txt -Append
      }
      Write-Host "Logs stored in: $(Pipeline.Workspace)/log.txt"





---------------------------------------------------------------------------



steps:
  - task: PowerShell@2
    displayName: 'Test Variable Values'
    inputs:
      targetType: inline
      script: |
        if (-not $env:clientId) {
          Write-Output "clientId is not set or empty."
        } else {
          Write-Output "clientId is set."
        }

        if (-not $env:clientSecret) {
          Write-Output "clientSecret is not set or empty."
        } else {
          Write-Output "clientSecret is set."
        }

        if (-not $env:tenantId) {
          Write-Output "tenantId is not set or empty."
        } else {
          Write-Output "tenantId is set."
        }


-----------------------------------------------------------------------------
trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'windows-latest'

variables:
  group: powerbi # Contains Clientsecret, clinetid, and tenantid
  SOURCE_WORKSPACE_ID: "c017440f-4a5b-46bd-a2c0-93ee3f04ab4d"
  TARGET_WORKSPACE_ID: "a4628c7b-adda-4285-8c1f-758b19162d0b"

steps:
- checkout: self
  fetchDepth: 0
  displayName: 'Checkout Repository'

- task: PowerShell@2
  displayName: 'Setup PowerShell Environment'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
      Install-Module PowerShellGet -Force -AllowClobber -Scope CurrentUser

- task: PowerShell@2
  displayName: 'Install Az Module'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser

- task: PowerShell@2
  displayName: 'Install Power BI Modules'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Install-Module -Name MicrosoftPowerBIMgmt -Force -AllowClobber -Scope CurrentUser

- task: PowerShell@2
  displayName: 'Install Additional Modules'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      Install-Module -Name Invoke-DQVTesting -AllowPrerelease -Force -AllowClobber -Scope CurrentUser
      Install-Module -Name Invoke-SemanticModelRefresh -AllowPrerelease -Force -AllowClobber -Scope CurrentUser

- task: PowerShell@2
  displayName: 'Setup FabricPS Module'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      $customModulePath = ".\.nuget\custom_modules"
      New-Item -Path $customModulePath -ItemType Directory -Force
      
      $urls = @(
          "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psm1",
          "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psd1"
      )
      
      foreach ($url in $urls) {
          $fileName = Split-Path $url -Leaf
          $outputPath = Join-Path $customModulePath $fileName
          Invoke-WebRequest -Uri $url -OutFile $outputPath -UseBasicParsing
      }

- task: PowerShell@2
  displayName: 'Authenticate and Process Changes'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      try {
          # Import modules
          Import-Module Az.Accounts -Force
          Import-Module MicrosoftPowerBIMgmt -Force
          Import-Module ".\.nuget\custom_modules\FabricPS-PBIP.psm1" -Force
          
          Write-Host "Setting up authentication..."
          # Clean any potential whitespace from tenant ID
          $tenantId = $env:TENANTID.Trim()
          Write-Host "Using tenant ID: $($tenantId.Substring(0,4))..." # Show only first 4 chars for security
          
          # Setup credentials
          $securePassword = ConvertTo-SecureString -String $env:CLIENTSECRET -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($env:CLIENTID, $securePassword)
          
          # Connect to Azure with explicit tenant ID
          Write-Host "Connecting to Azure..."
          Connect-AzAccount -ServicePrincipal `
                          -Credential $credential `
                          -Tenant $tenantId `
                          -ErrorAction Stop
          
          # Connect to Power BI with explicit tenant ID
          Write-Host "Connecting to Power BI..."
          Connect-PowerBIServiceAccount -ServicePrincipal `
                                      -Credential $credential `
                                      -Tenant $tenantId `
                                      -ErrorAction Stop
          
          # Set Fabric token with explicit tenant ID
          Write-Host "Setting Fabric authentication token..."
          Set-FabricAuthToken -servicePrincipalId $env:CLIENTID `
                             -servicePrincipalSecret $env:CLIENTSECRET `
                             -tenantId $tenantId `
                             -reset
          
          # Process changes
          $changedFiles = git diff --name-only HEAD~1 HEAD
          
          foreach ($file in $changedFiles) {
              if ($file -match "\.(pbix|pbit)$") {
                  Write-Host "Processing: $file"
                  $sourceItem = New-PowerBIReport -Path $file -WorkspaceId $env:SOURCE_WORKSPACE_ID
                  
                  Copy-PowerBIReport -WorkspaceId $env:SOURCE_WORKSPACE_ID `
                                   -ReportId $sourceItem.Id `
                                   -TargetWorkspaceId $env:TARGET_WORKSPACE_ID
              }
          }
      }
      catch {
          Write-Error "Authentication or processing failed: $_"
          throw
      }
  env:
    CLIENTSECRET: $(Clientsecret)
    CLIENTID: $(clinetid)
    TENANTID: $(tenantid)
    SOURCE_WORKSPACE_ID: $(SOURCE_WORKSPACE_ID)
    TARGET_WORKSPACE_ID: $(TARGET_WORKSPACE_ID)

- task: PowerShell@2
  displayName: 'Log Results'
  inputs:
    pwsh: true
    targetType: inline
    script: |
      $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
      "Deployment completed at $timestamp" | Out-File -FilePath "$(Build.ArtifactStagingDirectory)/deployment.log" -Append



